---
title: "Homework 3 Analysis"
author: "Katerina Bischel"
format: html
editor: visual
---

```{r}
#https://github.com/katerinabischel/bischel-katerina_homework-03.git
# general use
library(tidyverse)
library(readxl)
library(here)
library(janitor)

# visualizing pairs
library(GGally)

# model selection
library(MuMIn)

# model predictions
library(ggeffects)

# model tables
library(gtsummary)
library(flextable)
library(modelsummary)

drought_exp <- read_xlsx(path = here("data", 
                                     "Valliere_etal_EcoApps_Data.xlsx"),
                         sheet = "First Harvest")

# quick look at data 
str(drought_exp)


```

```{r}
class(drought_exp)
```

```{r}
# cleaning
drought_exp_clean <- drought_exp %>% 
  clean_names() %>% # nicer column names
  mutate(species_name = case_when( # adding column with species scientific names
    species == "ENCCAL" ~ "Encelia californica", # bush sunflower
    species == "ESCCAL" ~ "Eschscholzia californica", # California poppy
    species == "PENCEN" ~ "Penstemon centranthifolius", # Scarlet bugler
    species == "GRICAM" ~ "Grindelia camporum", # great valley gumweed
    species == "SALLEU" ~ "Salvia leucophylla", # Purple sage
    species == "STIPUL" ~ "Nasella pulchra", # Purple needlegrass
    species == "LOTSCO" ~ "Acmispon glaber" # deerweed
  )) %>% 
  relocate(species_name, .after = species) %>% # moving species_name column after species
  mutate(water_treatment = case_when( # adding column with full treatment names
    water == "WW" ~ "Well watered",
    water == "DS" ~ "Drought stressed"
  )) %>% 
  relocate(water_treatment, .after = water) # moving water_treatment column after water
```

```{r}
model0 <- lm(total_g ~ 1, # formula
             data = drought_exp_clean) # data frame
# saturated model
model1 <- lm(total_g ~ sla + water_treatment + species_name,
             data = drought_exp_clean)

par(mfrow = c(2, 2))
plot(model1)
```

```{r}
model2 <- lm(total_g ~ sla + water_treatment,
             data = drought_exp_clean)

par(mfrow = c(2, 2))
plot(model2)
```

```{r}
model3 <- lm(total_g ~ sla + species_name,
             data = drought_exp_clean)

par(mfrow = c(2, 2))
plot(model3)
```

```{r}
model_preds <- ggpredict(model1, 
                         terms = c("sla",
                                   "water_treatment", 
                                   "species_name"))

# use View(model_preds) to see the predictions as a data frame
# use model_preds to see the predictions formatted nicely
```

```{r}
# plot function within ggeffects
plot(model_preds, # model predictions
     limit_range = TRUE, # limit the range of predictions to the range of predictor values
     show_data = TRUE) + # show the underlying data
  # everything below this is ggplot() stuff
  theme_classic() + # classic theme
  labs(title = "Preliminary model visualization") + # plot title
  theme(panel.grid = element_blank()) # getting rid of gridlines
```

```{r}
# creating new data frame of model predictions for plotting
model_preds_for_plotting <- model_preds %>% 
  rename(sla = x, # renaming columns to make this easier to use
         water_treatment = group,
         species_name = facet)

# use View(model_preds_for_plotting) 
# to compare this to the original model_preds data frame

ggplot() +
  # underlying data
  geom_point(data = drought_exp_clean,
             aes(x = sla,
                 y = total_g,
                 color = water_treatment)) +
  # model prediction 95% CI ribbon
  geom_ribbon(data = model_preds_for_plotting,
              aes(x = sla, 
                  y = predicted,
                  ymin = conf.low,
                  ymax = conf.high,
                  fill = water_treatment),
              alpha = 0.2) +
  # model prediction lines
  geom_line(data = model_preds_for_plotting,
            aes(x = sla, 
                y = predicted,
                color = water_treatment)) +
  # cleaner theme
  theme_classic() +
  # creating different panels for species
  facet_wrap(~species_name) 
```

```{r}
# one option for a single model
flextable::as_flextable(model1) 
```

test

```{r}
class(drought_exp)
```

```{r}
# Comprehensive cleaning process
drought_exp_clean <- drought_exp |> 
  clean_names() |>   # Standardize column names
  mutate(
    # Decode categorical variables with more descriptive names
    species = as.factor(species),
    water = as.factor(water),
    species_name = case_when(
      species == "ENCCAL" ~ "Encelia californica",  # Bush sunflower
      species == "ESCCAL" ~ "Eschscholzia californica",  # California poppy
      species == "PENCEN" ~ "Penstemon centranthifolius",  # Scarlet bugler
      species == "GRICAM" ~ "Grindelia camporum",  # Great valley gumweed
      species == "SALLEU" ~ "Salvia leucophylla",  # Purple sage
      species == "STIPUL" ~ "Nasella pulchra",  # Purple needlegrass
      species == "LOTSCO" ~ "Acmispon glaber"  # Deerweed
    ),
    water_treatment = case_when(
      water == "WW" ~ "Well watered",
      water == "DS" ~ "Drought stressed"
    )
  ) |> 
  relocate(species_name, .after = species) |>   # Move species_name after species column
  relocate(water_treatment, .after = water) |>   # Move water_treatment after water column
  # Optional: Check for and handle missing values if necessary
  # mutate(across(where(is.numeric), ~if_else(is.na(.), median(., na.rm = TRUE), .)))
  # For an overview of the cleaned data
  glimpse()

# Optionally, check for missing values
sum(is.na(drought_exp_clean))
```

**Problem 1**

*a.*

```{r}
library(stats)

#define the models
model0 <- lm(total_g ~ 1, data = drought_exp_clean)  #null model, no predictors
model1 <- lm(total_g ~ sla, data = drought_exp_clean)  #model 1: SLA only
model2 <- lm(total_g ~ sla + water_treatment, data = drought_exp_clean)  #model 2: SLA and water treatment
model3 <- lm(total_g ~ sla + species_name, data = drought_exp_clean)  #model 3: SLA and species name
model4 <- lm(total_g ~ sla + water_treatment + species_name, data = drought_exp_clean)  #model 4: Full model including SLA, water treatment, and species name

library(knitr)

models_table <- data.frame(
  Model_Number = 0:4,
  Predictors = c("None",  # Null model
                 "SLA",  # Model 1
                 "SLA + Water Treatment",  # Model 2
                 "SLA + Species Name",  # Model 3
                 "SLA + Water Treatment + Species Name")  # Model 4
  )

kable(models_table, caption = "Table 1: Overview of Linear Regression Models. Each row represents a model, listing the predictors used in each.") #generate a table with a descriptive caption



```

*b. Statistical Methods*

In this study, I looked at how specific leaf area (SLA), water treatment, and plant species affect plant biomass. I built multiple linear regression models, adding one variable at a time to see their impact. I started with a basic model without any predictors and added more details step by step, examining how each one affected the model's accuracy.

I chose the best model based on a few key factors: whether the variables significantly influenced the outcome, how much each model improved the explanation of plant biomass compared to the previous models, and which model had the lowest AIC value, indicating a good balance between simplicity and fit.

To make sure the best model was appropriate, I checked it visually using different plots. These included a residuals plot to look for any patterns that shouldnâ€™t be there, a Q-Q plot to check if the residuals were normally distributed, and a scale-location plot to confirm that the data was spread evenly. These checks helped confirm that the model was reliable and met the necessary conditions for linear regression.

*c.*

```{r}
preds <- ggpredict(model4, terms = c("sla", "species_name", "water_treatment"))

# Creating the plot
plot <- ggplot(preds, aes(x = x, y = predicted, color = group)) +
  geom_line(size = 1.2) +  # Thicker line for predictions
  geom_point(data = drought_exp_clean, aes(x = sla, y = total_g, color = water_treatment), alpha = 0.4) +  # Underlying data
  scale_color_manual(values = c("Well watered" = "#1b9e77", "Drought stressed" = "#d95f02")) +  # Custom colors
  facet_wrap(~species_name) +  # Facet by species
  labs(title = "Model Predictions and Observed Data for Plant Biomass",
       x = "Specific Leaf Area (SLA)",
       y = "Total Biomaxx (g)",
       color = "Water Treatment") +
  theme_minimal() +  # Cleaner theme
  theme(legend.position = "none")  # Remove the legend

# Print the plot
print(plot)
```

*d.*

Figure 1: Predicted and observed total biomass of plants as a function of specific leaf area (SLA), faceted by species and colored by water treatment conditions. The lines represent model predictions for well-watered and drought-stressed treatments, overlaying the more transparent actual data points. Data from: Valliere, Justin; Zhang, Jacqueline; Sharifi, M.; Rundel, Philip (2019). Can we condition native plants to increase drought tolerance and improve restoration success? \[Dataset\]. Dryad, <https://doi.org/10.5061/dryad.v0861f7>

```{r}
library(ggeffects)
library(dplyr)

# Assuming 'model4' is your final model
model_preds <- ggpredict(model4, terms = c("sla", "species_name[all]", "water_treatment[all]"))

# Rename columns for easier plotting
model_preds_for_plotting <- model_preds %>%
  rename(sla = x,
         predicted = predicted,
         water_treatment = group,
         species_name = facet)

```

```{r, fig.width=12, fig.height=6}
library(ggplot2)
library(ggeffects)

# Assuming 'model4' is your final model and predictions have been generated
# First, let's assume the predictions are already prepared as needed
# model_preds_for_plotting <- ... (your code to generate and prepare predictions goes here)

# Now, create the visualization
ggplot(data = drought_exp_clean, aes(x = sla, y = total_g)) +
  geom_point(aes(color = water_treatment), alpha = 0.4) +  # Underlying data points
  geom_line(data = model_preds_for_plotting, aes(y = predicted, color = water_treatment), size = 1) +  # Model prediction lines
  geom_ribbon(data = model_preds_for_plotting, aes(y = predicted, ymin = conf.low, ymax = conf.high, fill = water_treatment), alpha = 0.2) +  # Confidence intervals
  facet_wrap(~species_name, scales = "free_y") +  # Separate panels for each species
  scale_color_manual(values = c("Well watered" = "#1b9e77", "Drought stressed" = "#d95f02")) +  # Custom colors for water treatments
  labs(title = "Model Predictions and Observed Data for Plant Biomass",
       x = "Specific Leaf Area (SLA)",
       y = "Total Biomass (g)") +
  theme_classic() +  # Classic theme for a clean look
  theme(panel.grid = element_blank(),  # Remove gridlines
        legend.position = "bottom")  # Adjust legend position


```

```{r}
# creating new data frame of model predictions for plotting
model_preds_for_plotting <- model_preds %>% 
  rename(sla = x, # renaming columns to make this easier to use
         water_treatment = group,
         species_name = facet)

# use View(model_preds_for_plotting) 
# to compare this to the original model_preds data frame

ggplot() +
  # underlying data
  geom_point(data = drought_exp_clean,
             aes(x = sla,
                 y = total_g,
                 color = water_treatment)) +
  # model prediction 95% CI ribbon
  geom_ribbon(data = model_preds_for_plotting,
              aes(x = sla, 
                  y = predicted,
                  ymin = conf.low,
                  ymax = conf.high,
                  fill = water_treatment),
              alpha = 0.2) +
  # model prediction lines
  geom_line(data = model_preds_for_plotting,
            aes(x = sla, 
                y = predicted,
                color = water_treatment)) +
  # cleaner theme
  theme_classic() +
  # creating different panels for species
  facet_wrap(~species_name) 
```
